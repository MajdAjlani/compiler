/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
static yyconst short int yy_accept[435] =
    {   0,
      119,  119,  114,  114,  125,  124,   65,   64,   66,  124,
      124,   67,   68,   76,   74,   75,   77,  119,  119,   73,
       85,   78,   86,  118,  118,  118,  118,  118,   71,   72,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,   69,   70,
      114,  115,  120,  119,  121,  120,  122,   90,    0,  123,
       83,   79,   81,   80,   82,  113,  117,   84,  120,    0,
        0,   87,   89,   88,  118,  118,  118,    8,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   13,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,    4,  118,

      104,  105,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  114,  115,  115,  116,  117,  117,  121,  121,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,    7,  103,  118,  118,   44,  118,
      118,  118,   59,  118,  118,  118,  118,  106,  118,  118,
      118,  118,  118,  118,   58,  118,  118,  118,   99,  118,
      118,  118,  118,  118,  118,  118,  118,   32,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  117,  120,  120,    0,  118,  118,   29,   49,  118,
       40,   12,  118,   36,  118,  118,  118,  118,  118,  118,
      118,  118,    5,   20,  118,  118,  118,  118,  118,  118,
      118,  118,   14,  118,  118,   97,   46,  118,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   30,
      118,   55,  118,   45,  118,  118,  110,  118,  118,  118,
      118,  118,   50,  118,  118,  121,  118,  118,   10,   33,
      118,   17,   57,  118,  118,  118,  118,  118,   93,  118,

      118,   56,  118,   63,   38,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       41,  118,   42,  118,  118,  118,  118,  118,  118,   34,
      118,   47,  118,  118,  118,    2,  111,  118,  118,    9,
      118,  118,  118,  118,  118,  118,  118,   39,  118,   94,
      118,  118,  118,  118,  118,  118,  118,   31,  118,  118,
       62,  118,  118,   21,  118,  118,  108,   25,   53,  118,
       26,   37,   18,   11,   52,  118,  100,   43,    0,  118,
      118,  118,  118,   51,  118,   48,   15,  118,  118,   35,
        6,  118,  118,  118,  118,  118,  118,  118,   22,  118,

      118,  107,  118,  118,    0,   28,  112,  118,   24,   16,
      101,  102,   95,  118,   96,  118,   91,   54,   27,  118,
       60,  109,  118,    0,   92,   19,    3,   23,   98,    0,
        0,    0,    1,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    1,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,   16,   17,
       18,   19,    1,    1,   20,   20,   20,   21,   22,   23,
       20,   20,   20,   20,   20,   24,   20,   25,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       26,    1,   27,    1,   20,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   20,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    4,    4,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1
    } ;

static yyconst short int yy_base[441] =
    {   0,
        0,    0,   52,   53,  503,  504,  504,  504,   59,  484,
      495,  504,  504,  482,   47,   48,   51,   63,    0,  504,
      481,  480,  479,    0,    0,    0,    0,  468,  504,  504,
       39,   49,   66,   39,   63,   78,   44,   82,  453,   71,
       78,   84,  462,  100,   89,   98,  102,  458,  504,  504,
        0,  132,  504,    0,  504,  504,  504,  504,  486,  485,
      504,  504,  504,  504,  504,  504,  477,  504,  138,  136,
      143,  504,  504,  504,    0,  449,  443,    0,  442,  444,
      453,  438,   33,  127,  455,  441,  133,  434,  435,  432,
      446,   73,  438,   46,  434,  431,  428,  427,    0,  429,

      425,    0,  126,  430,  420,  429,  132,  435,  420,  433,
      420,  126,  434,  143,  411,   42,  419,  408,  133,  423,
       53,  127,  415,  416,  414,  143,   74,  416,  410,  144,
      417,    0,  172,  173,  504,    0,  439,  180,  210,  419,
      404,  417,  409,  419,  414,  413,  414,  399,  412,  396,
      145,  404,  411,  406,  408,  404,  395,  393,  394,  400,
      386,  402,  397,  400,  395,    0,  384,  386,  392,  385,
      388,  389,    0,  381,  375,  386,  373,    0,  372,  387,
      366,  367,  373,  156,    0,  364,  364,  370,    0,  364,
      375,  162,  157,  360,  360,  362,  371,    0,  370,  355,

      359,  364,  352,  369,  354,  354,  347,  347,  361,  363,
      351,  376,  504,  195,  208,  343,  343,    0,    0,  348,
        0,    0,  350,    0,  346,  338,  336,  345,  340,  332,
      344,  338,    0,    0,  330,  339,  330,  341,  333,  340,
      324,  341,    0,  332,  323,    0,    0,  321,    0,  337,
      334,  335,  318,  321,  332,  327,  322,  315,  315,  311,
      322,  321,  306,  309,  312,  313,  307,  317,  316,    0,
      296,    0,  302,    0,  309,  310,    0,  308,  296,  305,
      306,  290,    0,  290,  303,  214,  291,  305,    0,    0,
      300,    0,    0,  290,  302,  290,  300,  295,    0,  296,

      284,    0,  285,    0,    0,  293,  292,  164,  278,  274,
      273,  272,  281,  271,  269,  284,  283,  271,  272,  269,
        0,  278,    0,  275,  268,  276,  271,  258,  268,    0,
      269,    0,  271,  268,  253,  294,    0,  269,  257,    0,
      267,  264,  262,  245,  252,  244,  243,    0,  252,    0,
      236,  251,  249,  256,  255,  254,  239,    0,  238,  248,
        0,  246,  231,    0,  237,  224,    0,    0,    0,  232,
        0,    0,    0,    0,    0,  238,    0,    0,  227,  232,
      238,  239,  222,    0,  233,    0,    0,  229,  212,    0,
        0,  211,  223,  207,  214,  195,  194,  204,    0,  202,

      175,    0,  191,  188,  173,    0,    0,  184,    0,    0,
        0,    0,    0,  183,    0,  175,    0,    0,    0,  175,
        0,    0,  171,  172,    0,    0,    0,    0,    0,  150,
      118,   42,  504,  504,  247,  251,   54,  255,  259,  263
    } ;

static yyconst short int yy_def[441] =
    {   0,
      434,    1,  435,  435,  434,  434,  434,  434,  434,  434,
      436,  434,  434,  434,    9,    9,  434,    9,   18,  434,
      434,  434,  434,  437,  437,  437,  437,  437,  434,  434,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  434,  434,
      438,  439,  434,   18,  434,  434,  434,  434,  436,  436,
      434,  434,  434,  434,  434,  434,  440,  434,  434,  434,
      434,  434,  434,  434,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  438,  439,  439,  434,  440,  440,  434,  434,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  440,  434,  434,  434,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  434,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  434,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  434,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  434,  437,  437,  437,  437,  437,  434,
      434,  434,  434,    0,  434,  434,  434,  434,  434,  434
    } ;

static yyconst short int yy_nxt[559] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,    6,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   24,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   24,   38,   24,   24,   39,   24,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   24,
       24,   24,   49,   50,    6,    6,   62,   75,   64,   66,
       52,   52,   53,   67,   63,   65,   69,   77,   68,  188,
       87,  433,   54,   54,   70,   97,   79,  146,  147,   55,
       88,   56,   57,   78,   71,   98,  162,  189,  195,   55,
       80,   56,   81,   83,   71,  163,  196,   57,  104,   82,

       84,   89,  105,   90,   85,   93,  107,   86,  205,  206,
       91,  111,   92,   94,   99,  159,   95,  106,  160,   96,
      108,  100,  101,  121,  109,  110,  102,  112,  115,  128,
      113,  116,  122,  124,  117,  118,  125,  129,  126,  123,
      134,   71,  127,  130,  135,  119,   71,   70,  120,  139,
      139,  138,  138,  432,  148,  170,  138,  138,  149,   71,
      192,  181,  152,  175,   71,  153,  171,  182,  176,   71,
      184,  154,  202,  197,   71,  185,  193,  198,  203,  209,
      434,  134,  210,  213,  434,  135,  258,  204,  186,  227,
      228,  265,  267,  138,  138,  431,  354,  259,  215,  430,

       55,  429,   56,  268,  355,  428,  427,  266,  286,  286,
       55,  215,   56,  214,  426,  425,  215,  213,  424,  423,
      422,  286,  286,  139,  139,  421,  215,  286,  286,  215,
       55,  215,   56,  420,   55,  419,   56,  418,  417,  215,
       55,  215,   56,  416,   55,  415,   56,   51,   51,   51,
       51,   59,  414,   59,   59,  132,  413,  412,  132,  133,
      411,  133,  133,  136,  410,  136,  136,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,

      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  137,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,

      274,  273,  272,  271,  270,  269,  264,  263,  262,  261,
      260,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  212,  211,  208,  207,  201,  200,  199,  194,  191,
      190,  187,  183,  180,  179,  178,  177,  174,  173,  172,
      169,  168,  167,  166,  165,  164,  161,  158,  157,  156,
      155,  151,  150,  145,  144,  143,  142,  141,  140,  137,
       60,   60,  131,  114,  103,   76,   74,   73,   72,   61,

       60,   58,  434,    5,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434
    } ;

static yyconst short int yy_chk[559] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   15,  437,   16,   17,
        3,    4,    9,   17,   15,   16,   18,   31,   17,  116,
       34,  432,    9,    9,   18,   37,   32,   83,   83,    9,
       34,    9,    9,   31,   18,   37,   94,  116,  121,    9,
       32,    9,   32,   33,   18,   94,  121,    9,   40,   32,

       33,   35,   40,   35,   33,   36,   41,   33,  127,  127,
       35,   42,   35,   36,   38,   92,   36,   40,   92,   36,
       41,   38,   38,   45,   41,   41,   38,   42,   44,   47,
       42,   44,   45,   46,   44,   44,   46,   47,   46,   45,
       52,   69,   46,   47,   52,   44,   71,   70,   44,   70,
       70,   69,   69,  431,   84,  103,   71,   71,   84,   69,
      119,  112,   87,  107,   71,   87,  103,  112,  107,   69,
      114,   87,  126,  122,   71,  114,  119,  122,  126,  130,
      133,  134,  130,  138,  133,  134,  184,  126,  114,  151,
      151,  192,  193,  138,  138,  430,  308,  184,  214,  424,

      138,  423,  138,  193,  308,  420,  416,  192,  214,  214,
      138,  215,  138,  139,  414,  408,  214,  286,  405,  404,
      403,  215,  215,  139,  139,  401,  214,  286,  286,  215,
      139,  139,  139,  400,  286,  398,  286,  397,  396,  215,
      139,  139,  139,  395,  286,  394,  286,  435,  435,  435,
      435,  436,  393,  436,  436,  438,  392,  389,  438,  439,
      388,  439,  439,  440,  385,  440,  440,  383,  382,  381,
      380,  379,  376,  370,  366,  365,  363,  362,  360,  359,
      357,  356,  355,  354,  353,  352,  351,  349,  347,  346,
      345,  344,  343,  342,  341,  339,  338,  336,  335,  334,

      333,  331,  329,  328,  327,  326,  325,  324,  322,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  307,  306,  303,  301,  300,  298,  297,  296,  295,
      294,  291,  288,  287,  285,  284,  282,  281,  280,  279,
      278,  276,  275,  273,  271,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  248,  245,  244,  242,  241,
      240,  239,  238,  237,  236,  235,  232,  231,  230,  229,
      228,  227,  226,  225,  223,  220,  217,  216,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,

      200,  199,  197,  196,  195,  194,  191,  190,  188,  187,
      186,  183,  182,  181,  180,  179,  177,  176,  175,  174,
      172,  171,  170,  169,  168,  167,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      150,  149,  148,  147,  146,  145,  144,  143,  142,  141,
      140,  137,  131,  129,  128,  125,  124,  123,  120,  118,
      117,  115,  113,  111,  110,  109,  108,  106,  105,  104,
      101,  100,   98,   97,   96,   95,   93,   91,   90,   89,
       88,   86,   85,   82,   81,   80,   79,   77,   76,   67,
       60,   59,   48,   43,   39,   28,   23,   22,   21,   14,

       11,   10,    5,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
#define INITIAL 0
/*** Definition Section ***/
/* C code to be copied verbatim */
#line 4 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
	#include <iostream>
	#include <istream>
	#include <ostream>
	#include <FlexLexer.h>
	
	#include "../parser/yacc.hpp"
	#include <stdlib.h>
	#include <unistd.h>
	#include "../header/tokens.h"
	using namespace std;

	int lineNo = 1;
	int colNo = 1;

/* options */
/* This tells flex to read only one input file */
/* define state */
#define multilinecomment 1

/* Flex definition */
/*** RULE Section ***/
#line 615 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 51 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"


#line 745 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 435 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 504 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("using static\n");}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("using\n");		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("namespace\n");	}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("if\n");			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 60 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("else\n");		}	
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("foreach\n");	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("for\n");		}				
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("as\n");			}				
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("while\n");		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("break\n");		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("switch\n");		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("case\n");		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("do\n");			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("goto\n");		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("default\n");	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("continue\n");	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("class\n");		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("struct\n");		}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("interface\n");	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("enum\n");		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("public\n");		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("private\n");	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("protected\n");	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("abstract\n");	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("sealed\n");		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("static\n");		}	
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("override\n");	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("virtual\n");	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("base\n");		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("this\n");		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 94 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("object\n");		}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("try\n");		}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 98 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("catch\n");		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 99 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("throw\n");		}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("finally\n");	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("char\n");		}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("string\n");		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("float\n");		}				
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("double\n");		}				
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("byte\n");		}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("sbyte\n");		}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("short\n");		}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("ushort\n");		}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("int\n");		}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("uint\n");		}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("long\n");		}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("ulong\n");		}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("decimal\n");	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("bool\n");		}		
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("void\n");		}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("checked\n");	}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("typeof\n");		}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 122 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("sizeof\n");		}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 123 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("operator\n");	}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("true\n");		}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("false\n");		}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("const\n");		}			
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("ref\n");		}			
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("new\n");		}		
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("readonly\n");	}		
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("null\n");		}		
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 135 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("params\n");		}		
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("fixed\n");		}				
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo=1;	lineNo++;	}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo+=4;	}			
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 147 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 148 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 149 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo++;	}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 156 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("plus\n");			}	
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 157 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("minus\n");			}	
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 158 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("multiple\n");		}	
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 159 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("divide\n");			}						
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 160 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("assigment\n");		}					
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 161 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("plus plus\n");		}	
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 162 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("minus minus\n");	}	
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 163 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("plus eq\n");		}	
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 164 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("minus eq\n");		}	
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 165 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("mult eq\n");		}	
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 166 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("div eq\n");			}	
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 170 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("smaller\n");		}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 171 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("bigger\n");			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 172 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("smaller or eq\n");	}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 173 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("bigger or eq\n");	}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 174 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("equal\n");			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 175 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("not equal\n");		}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 182 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("oberator\n");	}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 183 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("namespace\n");	}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 184 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("event\n");		}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 185 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("extern\n");		}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 186 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("implicit\n");	}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 187 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("internal\n");	}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 188 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("lock\n");		}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 189 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("uncheched\n");	}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 191 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("set\n");		}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 198 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("unsafe\n");		}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("delegate\n");	}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("explicit\n");	}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 206 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("get\n");		}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 207 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("in\n");			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 208 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("is\n");			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("out\n");		}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 212 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("reaonly\n");	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 213 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("return\n");		}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 215 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("stackloc\n");	}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 216 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("unit\n");		}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 218 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("value\n");		}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 219 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{	colNo += strlen(yytext);	printf("volatle\n");	}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 223 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ BEGIN multilinecomment; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 224 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 225 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{lineNo++;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 226 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ BEGIN INITIAL;	printf("multi line comment.\n");}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 228 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ printf("single line comment.\n");	lineNo++;	}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 232 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ 	colNo += strlen(yytext);	printf("Identifier\n");		}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 234 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
										colNo += strlen(yytext);
										int x=atoi(yytext);
										cout<<x<<endl;
										cout<<"Integer"<<endl; 
										
									}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 241 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
										colNo += strlen(yytext);
										float x=atof(yytext);
										cout<<x<<endl;
										cout <<"Float"<<endl;
										
									}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
										colNo += strlen(yytext);
										double x=atof(yytext);
										cout<<x<<endl;
										cout <<"Double"<<endl;
										
									}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 255 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
										colNo += strlen(yytext);
										long x=atol(yytext);
										cout<<x<<endl;
										cout <<"Long"<<endl;
										
									}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 262 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{

     colNo += strlen(yytext);
	 cout<<typeid(yytext).name()<<endl;
	 printf("%s\n",yytext); 

}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 272 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
ECHO;
	YY_BREAK
#line 1478 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 435 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 435 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 434);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 272 "C:\\Users\\Mohamed Khair\\Desktop\\shit\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"





/*** C Code Section **/
