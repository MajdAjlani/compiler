/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
static yyconst short int yy_accept[166] =
    {   0,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,   61,   59,    2,    1,    3,   32,   59,   59,
       29,   30,   59,   18,   19,   27,   25,   13,   26,   22,
       28,    9,    9,   24,   23,   21,   59,   20,   59,   57,
       14,   15,   34,   16,   31,   17,   33,    5,   60,    6,
        0,   49,   58,    0,    0,   12,   58,    0,   40,   52,
       42,    0,    0,   38,   54,   36,   55,   37,   56,   10,
        4,    8,   39,    0,    9,   10,   58,    9,    9,   58,
       44,   50,   48,   51,   45,    0,   57,    0,    0,   35,
       41,   43,   53,    5,    6,    6,    7,   58,   12,   58,

        0,    0,    0,   11,    0,    0,    0,   10,    0,    8,
        8,    8,    0,   10,    9,    9,   47,   46,    0,    0,
       12,   58,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    8,   10,   10,    9,    9,   12,   58,    0,    0,
        0,    0,    0,    0,   10,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,    8,   27,   28,   28,   28,   29,   30,   29,
       31,   31,   31,   31,   31,   32,   33,   31,   31,   31,
       31,   31,   31,   31,   34,   31,   31,   35,   31,   31,
       36,   37,   38,   39,   40,    1,   41,   41,   28,   29,

       30,   42,   31,   31,   31,   31,   31,   32,   33,   43,
       31,   31,   31,   43,   31,   43,   44,   43,   31,   45,
       31,   31,   46,   47,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        4,    1,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    1,    1,    1,    1,    1,    8,    7,    7,    7,
        8,    8,    8,    9,    8,    1,    3,    1,    1,    8,
        6,    6,    9,    9,    9,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[181] =
    {   0,
        0,    0,   47,   48,    0,    0,    0,    0,    0,    0,
        0,    0,  414,  889,  889,  889,  889,   57,  106,  388,
      379,   43,  364,  889,  889,  373,   44,  372,   54,   34,
       56,  138,   48,  889,  889,   32,  371,   69,  150,    0,
      174,  889,  366,  356,   27,  355,  354,    0,  889,  146,
      353,  889,    0,  154,    0,  348,  206,  140,  889,  347,
      889,  352,  152,  889,  889,  889,  889,  889,  889,  172,
      889,  251,  889,  167,  154,    0,  183,  172,  328,  189,
      333,  889,  889,  889,  220,  300,    0,  348,  352,  889,
      889,  889,  207,    0,  150,  201,  889,    0,  889,    0,

      341,  346,  364,  889,  379,  382,  397,  889,  208,    0,
        0,  420,  174,  437,    0,  210,  889,  889,  217,    0,
      352,  473,  429,  448,  454,  512,  506,  509,  211,  187,
      523,    0,  537,    0,  177,  149,  159,    0,  539,  543,
      579,  562,  585,  151,  889,    0,  602,  608,  644,  625,
      641,   61,  659,  358,  382,  674,   49,   47,  677,  692,
      707,  710,  725,  740,  889,  782,  791,  800,  804,  813,
      822,  826,  835,  842,  849,  858,  867,  873,  877,  881
    } ;

static yyconst short int yy_def[181] =
    {   0,
      165,    1,  166,  166,  167,  167,    1,    1,    1,    1,
        1,    1,  165,  165,  165,  165,  165,  165,  165,   18,
       18,   18,  168,  165,  165,  165,  165,   18,  165,  165,
       18,   18,   32,  165,  165,  165,  165,  165,   18,  169,
      165,  165,   18,   18,   18,   18,   18,  170,  165,  171,
       18,  165,  172,  173,   19,   18,  173,  174,  165,   18,
      165,  165,  175,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,   32,  172,  172,  172,  172,  172,
      165,  165,  165,  165,  165,  165,  169,  165,  165,  165,
      165,  165,   18,  170,  171,  171,  165,  172,  165,   57,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  176,
       72,  176,  165,  172,  172,   80,  165,  165,  177,   86,
       18,  177,  165,  165,  165,  173,  165,  165,  178,  165,
      165,  112,  165,  172,  172,  172,  165,  122,  165,  165,
      173,  165,  165,  179,  165,  172,  165,  165,  173,  165,
      165,  180,  165,  173,  173,  165,  165,  165,  165,  165,
      165,  165,  165,  165,    0,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165
    } ;

static yyconst short int yy_nxt[939] =
    {   0,
       14,   15,   16,   14,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   40,   40,
       40,   40,   40,   40,   40,   41,   14,   42,   43,   40,
       40,   40,   40,   40,   40,   44,   45,   46,   47,   49,
       49,   92,   60,   70,   70,   81,   82,  104,   65,  104,
       50,   50,   51,   51,   51,   51,   51,   61,   66,   71,
       67,  104,   51,   93,   72,   51,   51,   51,   68,   69,
       73,   52,   53,   51,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   84,   85,   51,   53,   53,   53,   53,

       53,   53,   51,   51,   51,   51,   54,   54,   54,   54,
       54,   55,   56,   55,   55,   55,   54,   54,   54,   54,
       54,   55,   54,   54,   55,   55,   55,   54,   54,   54,
       54,   54,   55,   57,   57,   57,   57,   57,   57,   57,
       57,   54,   58,   54,   55,   57,   57,   57,   57,   57,
       57,   55,   55,   55,   55,   74,   86,   75,   75,   96,
       99,  104,  165,  165,   97,  119,   76,   77,  165,   78,
       76,   79,   80,  101,  165,   88,   88,   88,   88,   76,
      146,   79,   80,  102,  103,  105,   70,   70,   53,   89,
       58,   70,   70,  133,  133,  106,  107,  113,   53,  113,

      108,  109,  114,  114,  108,  115,  131,  131,  116,  116,
      146,   90,   99,  108,   96,  115,  116,  116,  116,   97,
      146,  104,  130,  137,  130,  100,  100,  131,  131,  116,
      116,  165,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  135,   58,  136,  118,  100,  100,  100,  100,  100,
      100,  110,  110,  136,  110,  110,  111,  111,  111,  111,
      111,  110,  110,  110,  110,  110,  111,  110,  110,  111,
      111,  111,  110,  110,  110,  110,  110,  111,  112,  112,
      112,  112,  112,  112,  112,  112,  110,  110,  110,  111,
      112,  112,  112,  112,  112,  112,  111,  111,  111,  111,

      119,  119,  119,  119,  119,  120,  121,  120,  120,  120,
      119,  119,  119,  119,  119,  120,  119,  119,  120,  120,
      120,  119,  119,  119,  119,  119,  120,  122,  122,  122,
      122,  122,  122,  122,  122,  119,  119,  119,  120,  122,
      122,  122,  122,  122,  122,  120,  120,  120,  120,   88,
       88,   88,   88,  123,  123,  123,  123,  117,  120,  115,
      124,  124,  104,   89,   99,  125,  125,   89,  124,  124,
      124,  165,  165,  125,  125,  125,  165,  165,  165,  165,
      165,  124,  124,  126,  126,   90,  125,  125,   99,   90,
       91,  126,  126,  126,   58,   83,  165,   64,  127,  127,

       63,  128,  128,   59,  126,  126,  127,  127,  127,  128,
      128,  128,  165,  165,  165,  165,  129,  129,   58,  127,
      127,  165,  128,  128,  129,  129,  129,  165,  165,  165,
      123,  123,  123,  123,  165,  165,  165,  129,  129,  132,
      132,  165,  165,  165,   89,  165,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  165,  114,  114,  165,  132,
      132,  132,  132,  132,  132,  134,   90,  139,  139,  134,
      165,  165,  165,  140,  140,  139,  139,  139,  134,  137,
      165,  140,  140,  140,  165,  165,  165,  165,  139,  139,
      165,  165,  138,  138,  140,  140,  165,  165,  165,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  165,  165,
      165,  165,  138,  138,  138,  138,  138,  138,   99,  165,
      165,  165,  165,  165,  165,  142,  142,  165,  143,  143,
      165,  141,  141,  142,  142,  142,  143,  143,  143,  141,
      141,  141,  131,  131,  165,  165,  142,  142,   58,  143,
      143,  108,  141,  141,  165,  108,  133,  133,  147,  147,
      165,  165,  148,  148,  108,  145,  147,  147,  147,  145,
      148,  148,  148,  165,  165,  165,  165,  165,  145,  147,
      147,  150,  150,  148,  148,   99,  165,  165,  165,  150,
      150,  150,  165,  165,  165,  165,  165,  165,  149,  149,

      165,  165,  150,  150,  151,  151,  149,  149,  149,  165,
      165,  165,  151,  151,  151,   58,  165,  165,  165,  149,
      149,  153,  153,  165,  165,  151,  151,  154,  154,  153,
      153,  153,  165,  165,  165,  154,  154,  154,  165,  165,
      165,  165,  153,  153,  156,  156,  165,  165,  154,  154,
       99,  165,  156,  156,  156,  165,  165,  165,  165,  165,
      157,  157,  165,  155,  155,  156,  156,  165,  157,  157,
      157,  155,  155,  155,  165,  165,  165,  165,  159,  159,
       58,  157,  157,  165,  155,  155,  159,  159,  159,  165,
      165,  165,  165,  160,  160,  165,  161,  161,  165,  159,

      159,  160,  160,  160,  161,  161,  161,  165,  165,  165,
      165,  162,  162,  165,  160,  160,  165,  161,  161,  162,
      162,  162,  165,  165,  165,  165,  163,  163,  165,  164,
      164,  165,  162,  162,  163,  163,  163,  164,  164,  164,
      165,  165,  165,  165,  154,  154,  165,  163,  163,  165,
      164,  164,  154,  154,  154,  165,  165,  165,  165,  157,
      157,  165,  165,  165,  165,  154,  154,  157,  157,  157,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      157,  157,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       62,   62,   62,  165,   62,   62,   62,   62,   62,   87,
       87,   87,   87,   94,  165,   94,   94,  165,   94,   94,
       94,   94,   95,  165,   95,   95,   95,   95,   95,   95,
       95,   98,   98,   98,   98,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  165,   54,  165,  165,
       54,   62,   62,  165,   62,  165,  165,   62,  110,  165,
      110,  110,  110,  110,  110,  110,  110,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  144,  165,  144,  144,
      152,  165,  152,  152,  158,  165,  158,  158,   13,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165
    } ;

static yyconst short int yy_chk[939] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   45,   22,   30,   30,   36,   36,  158,   27,  157,
        3,    4,   18,   18,   18,   18,   18,   22,   27,   31,
       29,  152,   18,   45,   31,   18,   18,   18,   29,   29,
       31,   18,   33,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   33,   38,   38,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   32,   39,   32,   32,   50,
       54,  144,   32,   95,   50,  137,   32,   32,   95,   32,
       32,   32,   32,   58,   39,   41,   41,   41,   41,   32,
      136,   32,   32,   58,   58,   63,   74,   74,   75,   41,
       54,   70,   70,  113,  113,   63,   63,   77,   75,   77,

       70,   70,   77,   77,   70,   78,  130,  130,   80,   80,
      135,   41,   57,   70,   96,   78,   80,   80,   80,   96,
      135,  129,  109,  119,  109,   57,   57,  109,  109,   80,
       80,   93,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  116,   57,  116,   85,   57,   57,   57,   57,   57,
       57,   72,   72,  116,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   88,
       88,   88,   88,   89,   89,   89,   89,   81,  121,   79,
      101,  101,   62,   88,  154,  102,  102,   89,  101,  101,
      101,   60,   56,  102,  102,  102,  121,   51,   47,   46,
       44,  101,  101,  103,  103,   88,  102,  102,  155,   89,
       43,  103,  103,  103,  154,   37,   28,   26,  105,  105,

       23,  106,  106,   21,  103,  103,  105,  105,  105,  106,
      106,  106,   20,   13,    0,    0,  107,  107,  155,  105,
      105,    0,  106,  106,  107,  107,  107,    0,    0,    0,
      123,  123,  123,  123,    0,    0,    0,  107,  107,  112,
      112,    0,    0,    0,  123,    0,  112,  112,  112,  112,
      112,  112,  112,  112,  112,    0,  114,  114,    0,  112,
      112,  112,  112,  112,  112,  114,  123,  124,  124,  114,
        0,    0,    0,  125,  125,  124,  124,  124,  114,  122,
        0,  125,  125,  125,    0,    0,    0,    0,  124,  124,
        0,    0,  122,  122,  125,  125,    0,    0,    0,  122,

      122,  122,  122,  122,  122,  122,  122,  122,    0,    0,
        0,    0,  122,  122,  122,  122,  122,  122,  126,    0,
        0,    0,    0,    0,    0,  127,  127,    0,  128,  128,
        0,  126,  126,  127,  127,  127,  128,  128,  128,  126,
      126,  126,  131,  131,    0,    0,  127,  127,  126,  128,
      128,  131,  126,  126,    0,  131,  133,  133,  139,  139,
        0,    0,  140,  140,  131,  133,  139,  139,  139,  133,
      140,  140,  140,    0,    0,    0,    0,    0,  133,  139,
      139,  142,  142,  140,  140,  141,    0,    0,    0,  142,
      142,  142,    0,    0,    0,    0,    0,    0,  141,  141,

        0,    0,  142,  142,  143,  143,  141,  141,  141,    0,
        0,    0,  143,  143,  143,  141,    0,    0,    0,  141,
      141,  147,  147,    0,    0,  143,  143,  148,  148,  147,
      147,  147,    0,    0,    0,  148,  148,  148,    0,    0,
        0,    0,  147,  147,  150,  150,    0,    0,  148,  148,
      149,    0,  150,  150,  150,    0,    0,    0,    0,    0,
      151,  151,    0,  149,  149,  150,  150,    0,  151,  151,
      151,  149,  149,  149,    0,    0,    0,    0,  153,  153,
      149,  151,  151,    0,  149,  149,  153,  153,  153,    0,
        0,    0,    0,  156,  156,    0,  159,  159,    0,  153,

      153,  156,  156,  156,  159,  159,  159,    0,    0,    0,
        0,  160,  160,    0,  156,  156,    0,  159,  159,  160,
      160,  160,    0,    0,    0,    0,  161,  161,    0,  162,
      162,    0,  160,  160,  161,  161,  161,  162,  162,  162,
        0,    0,    0,    0,  163,  163,    0,  161,  161,    0,
      162,  162,  163,  163,  163,    0,    0,    0,    0,  164,
      164,    0,    0,    0,    0,  163,  163,  164,  164,  164,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      164,  164,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      168,  168,  168,    0,  168,  168,  168,  168,  168,  169,
      169,  169,  169,  170,    0,  170,  170,    0,  170,  170,
      170,  170,  171,    0,  171,  171,  171,  171,  171,  171,
      171,  172,  172,  172,  172,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  174,  174,    0,  174,    0,    0,
      174,  175,  175,    0,  175,    0,    0,  175,  176,    0,
      176,  176,  176,  176,  176,  176,  176,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  178,    0,  178,  178,
      179,    0,  179,  179,  180,    0,  180,  180,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
	#include <string.h>
	#include <unistd.h>
	#include <iostream>
	#include <FlexLexer.h>
	#include <string>
	#include <queue>
	#include "../parser/yacc.hpp"

	int line_no = 1;
	int col_no = 1;
	queue <int> t;


	void lexical_error(const char *, char *);
	static int token_for(const char *);

	void doForReturn(char * yytext){
		yylval.r.col_no = col_no;
		yylval.r.line_no = line_no;
		col_no += strlen(yytext);
	}
	void doForName(char* yytext){
		yylval.r.str = new char[255];
		yylval.r.str[0] = '\0';
		strcpy(yylval.r.str, yytext);
	}
#define YY_STACK_USED 1
#define multilinecomment 1

#define IN_COMMENT 2

#define IN_ATTRIB 3
#define IN_ACCESSOR 4
#define IN_GETSET 5

#line 622 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 86 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"



		while(!t.empty()){
			int x = t.front();
			t.pop();
			return x;
		}

					/***** White comments *****/
#line 760 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 166 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 889 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 96 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ col_no=1; line_no++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 97 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ col_no+=4; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ col_no++; }
	YY_BREAK
/***** Comments *****/
case 4:
YY_RULE_SETUP
#line 102 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ BEGIN multilinecomment; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 103 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 104 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{line_no++;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ BEGIN INITIAL;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ line_no++; col_no=1; }
	YY_BREAK
/***** Literals *****/
case 9:
YY_RULE_SETUP
#line 110 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); yylval.r.i=atoi(yytext); t.push(INTEGER_LITERAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); yylval.r.f=(float)atof(yytext); t.push(REAL_LITERAL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); yylval.r.c=yytext[1]; t.push(CHARACTER_LITERAL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); doForName(yytext); t.push(STRING_LITERAL); }
	YY_BREAK
/*** Punctuation and Single-Character Operators ***/
case 13:
YY_RULE_SETUP
#line 116 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(COMMA); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LEFT_BRACKET); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(RIGHT_BRACKET); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LEFT_BRACKET_GROUP); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 120 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(RIGHT_BRACKET_GROUP); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 121 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LEFT_BRACKET_CIRCLE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 122 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(RIGHT_BRACKET_CIRCLE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(GREATER); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(SMALLER); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 127 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(DOT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 128 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(SEMICOLON); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(COLON); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 131 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(PLUS); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 132 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(MINUS); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 133 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(STAR); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(SLASH); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 135 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(PERCENT); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 136 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(AND); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 137 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(OR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 138 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(EXCLAMATION_POINT); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 139 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(TILDE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 140 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(QUESTION_MARK); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 143 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ t.push(RANK_SPECIFIER); }
	YY_BREAK
/*** Multi-Character Operators ***/
case 36:
YY_RULE_SETUP
#line 146 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(PLUSEQ); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(MINUSEQ); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 148 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(STAREQ); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 149 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(DIVEQ); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 150 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(MODEQ); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(XOREQ); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(ANDEQ); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 153 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(OREQ); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LTLT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(GTGT); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 156 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(GTGTEQ); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 157 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LTLTEQ); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(EQEQ); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(NOTEQ); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 160 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(LEQ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 161 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(GEQ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(ANDAND); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 163 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(OROR); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 164 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(PLUSPLUS); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 165 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(MINUSMINUS); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 166 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); t.push(ARROW); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); doForName(yytext); t.push(token_for(yytext)); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 172 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{ doForReturn(yytext); doForName(yytext); lexical_error("invalid token", yytext); t.push(BAD_IDENTIFIER); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 176 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
        lexical_error("invalid token", yytext);
      }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(IN_COMMENT):
case YY_STATE_EOF(IN_ATTRIB):
case YY_STATE_EOF(IN_ACCESSOR):
case YY_STATE_EOF(IN_GETSET):
#line 180 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
{
	t.push(0);
	while(!t.empty()){
		int x = t.front();
		t.pop();
		return x;
	}
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 188 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"
ECHO;
	YY_BREAK
#line 1165 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 166 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 166 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 165);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 188 "C:\\Users\\maher\\Desktop\\Compiler\\compiler\\src\\compiler\\Lexical Analyzer\\lex.l"



static struct name_value {
  char *name;
  int value;
} name_value;
static struct name_value keywords [] = {
 /* This list must remain sorted!!! */
    {"abstract", ABSTRACT},
    {"as", AS},
    {"base", BASE},
    {"bool", BOOL},
    {"break", BREAK},
    {"byte", BYTE},
    {"case", CASE},
    {"catch", CATCH},
    {"char", CHAR},
    {"checked", CHECKED},
    {"class", CLASS},
    {"const", CONST},
    {"continue", CONTINUE},
    {"decimal", DECIMAL},
    {"default", DEFAULT},
    {"delegate", DELEGATE},
    {"do", DO},
    {"double", DOUBLE},
    {"else", ELSE},
    {"enum", ENUM},
    {"event", EVENT},
    {"explicit", EXPLICIT},
    {"extern", EXTERN},
    {"false", FALSE},
    {"finally", FINALLY},
    {"fixed", FIXED},
    {"float", FLOAT},
    {"for", FOR},
    {"foreach", FOREACH},
    {"goto", GOTO},
    {"if", IF},
    {"implicit", IMPLICIT},
    {"in", IN},
    {"int", INT},
    {"interface", INTERFACE},
    {"internal", INTERNAL},
    {"is", IS},
    {"lock", LOCK},
    {"long", LONG},
    {"namespace", NAMESPACE},
    {"new", NEW},
    {"null", NULL_LITERAL},
    {"object", OBJECT},
    {"operator", OPERATOR},
    {"out", OUT},
    {"override", OVERRIDE},
    {"params", PARAMS},
    {"private", PRIVATE},
    {"protected", PROTECTED},
    {"public", PUBLIC},
    {"readonly", READONLY},
    {"ref", REF},
    {"return", RETURN},
    {"sbyte", SBYTE},
    {"sealed", SEALED},
    {"short", SHORT},
    {"sizeof", SIZEOF},
    {"stackalloc", STACKALLOC},
    {"static", STATIC},
    {"string", STRING},
    {"struct", STRUCT},
    {"switch", SWITCH},
    {"this", THIS},
    {"throw", THROW},
    {"true", TRUE},
    {"try", TRY},
    {"typeof", TYPEOF},
    {"uint", UINT},
    {"ulong", ULONG},
    {"unchecked", UNCHECKED},
    {"unsafe", UNSAFE},
    {"ushort", USHORT},
    {"using", USING},
    {"virtual", VIRTUAL},
    {"void", VOID},
    {"volatile", VOLATILE},
    {"while", WHILE},
  };


/* Conduct a binary search for lexeme in the keywords array
 * between indices start (inclusive) and finish (exclusive)
 */
static int bin_search(const char *lexeme, int start, int finish)
{
  if (start >= finish)  /* Not found */
      return IDENTIFIER;
  else {
    int mid = (start+finish)/2;
    int cmp = strcmp(lexeme,keywords[mid].name);
    if (cmp == 0)
      return keywords[mid].value;
    else if (cmp < 0)
      return bin_search(lexeme,start,mid);
    else
      return bin_search(lexeme,mid+1,finish);
  }
}

static int token_for(const char *lexeme)
{

  static int num_keywords = sizeof(keywords) / sizeof(name_value);
  int token = bin_search(lexeme,0,num_keywords);
  if (token == -1)
    token = IDENTIFIER;
  return token;
}



void lexical_error(const char *msg, char *yytext)
{

	FILE *f = fopen("Lexical Errors.log","a");
	fprintf(f,"line:%d-col:%d -> lexical error (%s) [%s]\n",line_no,col_no,msg,yytext);
	fclose(f);

}